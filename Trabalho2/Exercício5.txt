;---------------------------------------------------
; Programa: Torre de Hanói
; Autor: Eduardo Kota Otomo
; Data: 09.09.2021
;---------------------------------------------------
ORG 700
A: DS  1
N: DB 0
disco: DB 0

pinoA: DB 65
pinoB: DB 66
pinoC: DB 67


origem: DW pinoA
destino: DW pinoB
trabalho: DW pinoC


t: DW origem




ORG 800
UNI:      DB 0
DEZ:      DB 0
CEM:      DB 0
MIL:      DB 0
DEZM:     DB 0
FLAGM:    DB 0
ENDRET:   DW 0
PTR_END:  DW ENDRET


ORG 0
main:
passos:     DW 0
  IN   1         ; Verifica se Entrou
  ADD  #0
  JZ   main     ; Loop se não Entrou
  IN   0         ; Lê o Entrada
  STA  N          ; Salva na mem�ria
  OUT  0         ; Mostra o valor lida no visor
  SUB  #1
  STA  disco

  JSR hanoi
  OUT 3
  LDA #passos
  PUSH
  JSR CONVERTER
  JSR reseta
  HLT
  END main


hanoi:

  LDA disco
  ADD #0

  JNZ recursao
  LDA passos
  ADD #1
  STA passos
  OUT 0

  OUT 3
  LDA @origem
  OUT 2
  LDA #45
  OUT 2
  LDA #62
  OUT 2
  LDA @destino
  OUT 2

  RET


recursao:
  LDA disco
  SUB #1
  STA disco

  LDA trabalho
  STA t
  LDA destino
  STA trabalho
  LDA t
  STA destino

  JSR hanoi

  LDA trabalho
  STA t
  LDA destino
  STA trabalho
  LDA t
  STA destino

  LDA passos
  ADD #1
  STA passos
  OUT 0

  OUT 3
  LDA @origem
  OUT 2
  LDA #45
  OUT 2
  LDA #62
  OUT 2
  LDA @destino
  OUT 2

  LDA origem
  STA t
  LDA trabalho
  STA origem
  LDA t
  STA trabalho

  JSR hanoi

  LDA origem
  STA t
  LDA trabalho
  STA origem
  LDA t
  STA trabalho

  LDA disco
  ADD #1
  STA disco

  RET

reseta:
  LDA pinoA
  STA origem
  LDA pinoB
  STA trabalho
  LDA pinoC
  STA destino
  RET
CONVERTER:
           STS ENDRET; salva o endereco de retorno
           POP ;descarta
           POP ;descarta
TEMP_ALTA: DB 0 ; parte alta
TEMP_BAIXA:DB 0 ; parte baixa
I:         DB 0 ; iterador
PTR_LOOP:  DW DEZM ; Ponteiro auxiliar para os valores do LOOP
PTR_ALTA:  DS 2 ;Ponteiro para a parte alta do o valor a ser convertido
PTR_BAIXA: DS 2 ;Ponteiro para a parte baixa do o valor a ser convertido
           POP  ;desempilha
           STA PTR_BAIXA  ; pega o valor da parte baixa
           ADD #1
           STA PTR_ALTA
           LDA @PTR_BAIXA
           STA TEMP_BAIXA
           LDA @PTR_ALTA
           STA TEMP_ALTA
INICIO_ALG: ; algoritmo double-dabble
DESLOCAMENTO_DEZM: ; shift left na casa das dezenas de milhar
           LDA DEZM
           SHL
           STA DEZM
DESLOCAMENTO_MIL: ; shift left na casa dos milhares
           LDA MIL
           SHL
           STA MIL
           JNC DESLOCAMENTO_CEM ; sem carry vai para proxima fase
           LDA DEZM ;lida com o carry do shift
           ADD #10H
           STA DEZM
DESLOCAMENTO_CEM:  ;shift left na casa das centenas
           LDA CEM
           SHL
           STA CEM
           JNC DESLOCAMENTO_DEZ ; sem carry vai para proxima fase
           LDA MIL ;lida com o carry do shift
           ADD #10H
           STA MIL
DESLOCAMENTO_DEZ: ;shift left na casa das dezenas
           LDA DEZ
           SHL
           STA DEZ
           JNC DESLOCAMENTO_UNI ; sem carry vai para proxima fase
           LDA CEM ;lida com o carry do shift
           ADD #10H
           STA CEM
DESLOCAMENTO_UNI: ;shift left na casa das unidades
           LDA UNI
           SHL
           STA UNI
           JNC DESLOCAMENTO_ALTA ; sem carry vai para proxima fase
           LDA DEZ ;lida com o carry do shift
           ADD #10H
           STA DEZ
DESLOCAMENTO_ALTA: ;shift left na parte alta
           LDA TEMP_ALTA
           SHL
           STA TEMP_ALTA
           JNC DESLOCAMENTO_BAIXA ; sem carry vai para proxima fase
           LDA UNI ;lida com o carry do shift
           ADD #10H
           STA UNI
DESLOCAMENTO_BAIXA: ;shift left na parte baixa
           LDA TEMP_BAIXA
           SHL
           STA TEMP_BAIXA
           JNC VERIFICAR; sem carry vai para proxima fase
           LDA TEMP_ALTA ;lida com o carry do shift
           ADD #1
           STA TEMP_ALTA
VERIFICAR:
           LDA TEMP_ALTA ; verifica se tanto a parte alta quanto baixa foram zeradas
           OR  TEMP_BAIXA;
           JZ  IMPRESSAO
TESTES_MAIORQ_5: ; testa se os digitos sao maiores que 5
                 ; para que fosse possivel o carry do shift de um digito para o outro
                 ; so usamos os 4 primeiros bits das variaveis
                 ; por isso todos os valores sao multiplicados por 16
           JMP INICIO_TESTE_DEZM
CASO_DEZM_NEG: ; caso o digito das dezenas de milhar seja maior que 5 , soma 3
           LDA DEZM
           ADD #48
           STA DEZM
           JMP FIM_TESTE_DEZM
INICIO_TESTE_DEZM: ;testa se o digito das dezenas de milhar e maior que 5
           LDA DEZM
           SUB #80
           JN  FIM_TESTE_DEZM
           JMP CASO_DEZM_NEG
FIM_TESTE_DEZM:
           JMP INICIO_TESTE_MIL
CASO_MIL_NEG: ; caso o digito dos milhares seja maior que 5 , soma 3
           LDA MIL
           ADD #48
           STA MIL
           JNC FIM_TESTE_MIL
           LDA DEZM ;lida com um possivel carry para casa das dezenas de milhares
           ADD #10H
           STA DEZM
           JMP FIM_TESTE_MIL
INICIO_TESTE_MIL: ;testa se o digito dos milhares e maior que 5
           LDA MIL
           SUB #80
           JN  FIM_TESTE_MIL
           JMP CASO_MIL_NEG
FIM_TESTE_MIL:
           JMP INICIO_TESTE_CEM
CASO_CEM_NEG: ; caso o digito das centenas seja maior que 5 , soma 3
           LDA CEM
           ADD #48
           STA CEM
           JNC FIM_TESTE_CEM
           LDA MIL ;lida com um possivel carry para casa dos milhares
           ADD #10H
           STA MIL
           JNC FIM_TESTE_CEM
           LDA DEZM ;lida com um possivel carry para casa das dezenas de milhares
           ADD #10H
           STA DEZM
           JMP FIM_TESTE_CEM
INICIO_TESTE_CEM: ;testa se o digito das centenas e maior que 5
           LDA CEM
           SUB #80
           JN  FIM_TESTE_CEM
           JMP CASO_CEM_NEG
FIM_TESTE_CEM:
           JMP INICIO_TESTE_DEZ
CASO_DEZ_NEG: ; caso o digito das dezenas seja maior que 5 , soma 3
           LDA DEZ
           ADD #48
           STA DEZ
           JNC FIM_TESTE_DEZ
           LDA CEM ;lida com um possivel carry para casa das centenas
           ADD #10H
           STA CEM
           JNC FIM_TESTE_DEZ
           LDA MIL ;lida com um possivel carry para casa dos milhares
           ADD #10H
           STA MIL
           JNC FIM_TESTE_DEZ
           LDA DEZM ;lida com um possivel carry para casa das dezenas de milhares
           ADD #10H
           STA DEZM
           JMP FIM_TESTE_DEZ
INICIO_TESTE_DEZ: ;testa se o digito das dezenas e maior que 5
           LDA DEZ
           SUB #80
           JN  FIM_TESTE_DEZ
           JMP CASO_DEZ_NEG
FIM_TESTE_DEZ:
           JMP INICIO_TESTE_UNI
CASO_UNI_NEG: ; caso o digito das unidades seja maior que 5 , soma 3
           LDA UNI
           ADD #48
           STA UNI
           JNC FIM_TESTE_UNI
           LDA DEZ ;lida com um possivel carry para casa das dezenas
           ADD #10H
           STA DEZ
           JNC FIM_TESTE_UNI
           LDA CEM ;lida com um possivel carry para casa das centenas
           ADD #10H
           STA CEM
           JNC FIM_TESTE_UNI
           LDA MIL ;lida com um possivel carry para casa dos milhares
           ADD #10H
           STA MIL
           JNC FIM_TESTE_UNI
           LDA DEZM ;lida com um possivel carry para casa das dezenas de milhares
           ADC #10H
           STA DEZM
           JMP FIM_TESTE_UNI
INICIO_TESTE_UNI:
           LDA UNI
           SUB #80
           JN  FIM_TESTE_UNI
           JMP CASO_UNI_NEG
FIM_TESTE_UNI:
           JMP INICIO_ALG
IMPRESSAO:
           OUT 3 ; limpa o banner
           LDA #1   ;verifica a flag
           SUB FLAGM
           JNZ INICIO_LOOP
           ADD #45 ; converte para ASCII
           OUT 2 ; imprime o sinal
INICIO_LOOP: ;transforma em ASCII e imprime os digitos no banner
           LDA #DEZM
           SUB I
           STA PTR_LOOP
           LDA @PTR_LOOP
           SHR ; shift de 4 bits para direita em cada digito
           SHR
           SHR
           SHR
           ADD #30H ; converte para representacao ASCII
           OUT 2 ; imprime o digito no banner
           LDA I
           ADD #1
           STA I
           LDA #5
           SUB I
           JP  INICIO_LOOP
CLEAR:
           LDA #0  ; Reseta as variaveis
           STA UNI
           STA DEZ
           STA CEM
           STA MIL
           STA DEZM
           STA PTR_LOOP
           STA I
           STA FLAGM
RETORNO2:
          LDS ENDRET ; retorno da funcao
          RET


